/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * tsoa-example
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useMutation
} from '@tanstack/react-query'
import type {
  UseMutationOptions,
  MutationFunction
} from '@tanstack/react-query'
import type {
  StartStory201,
  StoryStartRequest,
  StoryWithChoices,
  StoryContinueRequest
} from './schemas'



/**
 * Responds with a new story.
 */
export const startStory = (
    storyStartRequest: StoryStartRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<StartStory201>> => {
    
    return axios.post(
      `/story`,
      storyStartRequest,options
    );
  }



export const getStartStoryMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof startStory>>, TError,{data: StoryStartRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof startStory>>, TError,{data: StoryStartRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof startStory>>, {data: StoryStartRequest}> = (props) => {
          const {data} = props ?? {};

          return  startStory(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type StartStoryMutationResult = NonNullable<Awaited<ReturnType<typeof startStory>>>
    export type StartStoryMutationBody = StoryStartRequest
    export type StartStoryMutationError = AxiosError<unknown>

    export const useStartStory = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof startStory>>, TError,{data: StoryStartRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getStartStoryMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * Responds with a continuation of the existing story.
 */
export const decision = (
    storyContinueRequest: StoryContinueRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<StoryWithChoices>> => {
    
    return axios.post(
      `/story/decision`,
      storyContinueRequest,options
    );
  }



export const getDecisionMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof decision>>, TError,{data: StoryContinueRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof decision>>, TError,{data: StoryContinueRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof decision>>, {data: StoryContinueRequest}> = (props) => {
          const {data} = props ?? {};

          return  decision(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DecisionMutationResult = NonNullable<Awaited<ReturnType<typeof decision>>>
    export type DecisionMutationBody = StoryContinueRequest
    export type DecisionMutationError = AxiosError<unknown>

    export const useDecision = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof decision>>, TError,{data: StoryContinueRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDecisionMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
